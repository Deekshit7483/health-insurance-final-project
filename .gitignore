# Logs<<<<<<< HEAD

logs# Logs

*.loglogs

npm-debug.log**.log

yarn-debug.log*npm-debug.log*

yarn-error.log*yarn-debug.log*

lerna-debug.log*yarn-error.log*

.pnpm-debug.log*lerna-debug.log*

.pnpm-debug.log*

# Runtime data

pids# Runtime data

*.pidpids

*.seed*.pid

*.pid.lock*.seed

*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage# Coverage directory used by tools like istanbul

*.lcovcoverage

*.lcov

# nyc test coverage

.nyc_output# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript# node_modules

node_modules/

# Compiled binary addons (https://nodejs.org/api/addons.html)jspm_packages/

build/Release

# Snowpack dependency directory (https://snowpack.dev/)

# Dependency directoriesweb_modules/

node_modules/

jspm_packages/# TypeScript cache

*.tsbuildinfo

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/# Optional npm cache directory

.npm

# TypeScript cache

*.tsbuildinfo# Optional eslint cache

.eslintcache

# Optional npm cache directory

.npm# Optional stylelint cache

.stylelintcache

# Optional eslint cache

.eslintcache# Microbundle cache

.rpt2_cache/

# Optional stylelint cache.rts2_cache_cjs/

.stylelintcache.rts2_cache_es/

.rts2_cache_umd/

# Microbundle cache

.rpt2_cache/# Optional REPL history

.rts2_cache_cjs/.node_repl_history

.rts2_cache_es/

.rts2_cache_umd/# Output of 'npm pack'

*.tgz

# Optional REPL history

.node_repl_history# Yarn Integrity file

.yarn-integrity

# Output of 'npm pack'

*.tgz# dotenv environment variable files

.env

# Yarn Integrity file.env.development.local

.yarn-integrity.env.test.local

.env.production.local

# dotenv environment variable files.env.local

.env

.env.development.local# parcel-bundler cache (https://parceljs.org/)

.env.test.local.cache

.env.production.local.parcel-cache

.env.local

# Next.js build output

# parcel-bundler cache (https://parceljs.org/).next

.cacheout

.parcel-cache

# Nuxt.js build / generate output

# Next.js build output.nuxt

.nextdist

out

# Gatsby files

# Nuxt.js build / generate output.cache/

.nuxtpublic

dist

# Vite build output

# Gatsby filesdist/

.cache/dist-ssr/

# Comment in the public line in if your project uses Gatsby and not Next.js*.local

# https://nextjs.org/blog/next-9-1#public-directory-support

# public# Rollup.js default build output

dist/

# vuepress build output

.vuepress/dist# Storybook build outputs

.out

# vuepress v2.x temp and cache directory.storybook-out

.tempstorybook-static

.cache

# Temporary folders

# Docusaurus cache and generated filestmp/

.docusaurustemp/



# Serverless directories# Editor directories and files

.serverless/.vscode/*

!.vscode/extensions.json

# FuseBox cache.idea

.fusebox/.DS_Store

*.swp

# DynamoDB Local files*.swo

.dynamodb/*~



# TernJS port file# OS generated files

.tern-portThumbs.db

ehthumbs.db

# Stores VSCode versions used for testing VSCode extensionsDesktop.ini

.vscode-test=======

# Dependencies

# yarn v2node_modules/

.yarn/cachenpm-debug.log*

.yarn/unpluggedyarn-debug.log*

.yarn/build-state.ymlyarn-error.log*

.yarn/install-state.gzpnpm-debug.log*

.pnp.*lerna-debug.log*



# Byte-compiled / optimized / DLL files# Build outputs

__pycache__/dist/

*.py[cod]build/

*$py.class*.local



# C extensions# Environment variables

*.so.env

.env.local

# Distribution / packaging.env.development.local

.Python.env.test.local

build/.env.production.local

develop-eggs/

dist/# Editor directories and files

downloads/.vscode/

eggs/.idea/

.eggs/*.suo

lib/*.ntvs*

lib64/*.njsproj

parts/*.sln

sdist/*.sw?

var/.DS_Store

wheels/>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b

share/python-wheels/

*.egg-info/# Python

.installed.cfg__pycache__/

*.egg*.py[cod]

MANIFEST*$py.class

<<<<<<< HEAD

# PyInstaller

#  Usually these files are written by a python script from a template# C extensions

#  before PyInstaller builds the exe, so as to inject date/other infos into it.*.so

*.manifest

*.spec# Distribution / packaging

=======

# Installer logs*.so

pip-log.txt>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b

pip-delete-this-directory.txt.Python

build/

# Unit test / coverage reportsdevelop-eggs/

htmlcov/dist/

.tox/downloads/

.nox/eggs/

.coverage.eggs/

.coverage.*lib/

.cachelib64/

nosetests.xmlparts/

coverage.xmlsdist/

*.covervar/

*.py,coverwheels/

.hypothesis/share/python-wheels/

.pytest_cache/*.egg-info/

cover/.installed.cfg

*.egg

# TranslationsMANIFEST

*.mo

*.pot# PyInstaller

<<<<<<< HEAD

# Django stuff:#  Usually these files are written by a python script from a template

*.log#  before PyInstaller builds the exe, so as to inject date/other infos into it.

local_settings.py=======

db.sqlite3>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b

db.sqlite3-journal*.manifest

*.spec

# Flask stuff:

instance/# Installer logs

.webassets-cachepip-log.txt

pip-delete-this-directory.txt

# Scrapy stuff:

.scrapy# Unit test / coverage reports

htmlcov/

# Sphinx documentation.tox/

docs/_build/.nox/

.coverage

# PyBuilder.coverage.*

.pybuilder/.cache

target/nosetests.xml

coverage.xml

# Jupyter Notebook*.cover

.ipynb_checkpoints*.py,cover

.hypothesis/

# IPython.pytest_cache/

profile_default/cover/

ipython_config.py

# Translations

# pyenv*.mo

#   For a library or package, you might want to ignore these files since the code is*.pot

#   intended to run in multiple environments; otherwise, check them in:

# .python-version# Django stuff:

*.log

# pipenvlocal_settings.py

#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.db.sqlite3

#   However, in case of collaboration, if having platform-specific dependencies or dependenciesdb.sqlite3-journal

#   having no cross-platform support, pipenv may install dependencies that don't work, or not

#   install all needed dependencies.# Flask stuff:

#Pipfile.lockinstance/

.webassets-cache

# poetry

#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.# Scrapy stuff:

#   This is especially recommended for binary packages to ensure reproducibility, and is more.scrapy

#   commonly ignored for libraries.

#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control# Sphinx documentation

#poetry.lockdocs/_build/



# pdm# PyBuilder

#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control..pybuilder/

#pdm.locktarget/

#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it

#   in version control.# Jupyter Notebook

#   https://pdm.fming.dev/#use-with-ide.ipynb_checkpoints

.pdm.toml

# IPython

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdmprofile_default/

__pypackages__/ipython_config.py



# Celery stuff# pyenv

celerybeat-schedule<<<<<<< HEAD

celerybeat.pid#   For a library or package, you might want to ignore these files since the code is

#   intended to run in multiple environments; otherwise, check them in:

# SageMath parsed files# .python-version

*.sage.py

# pipenv

# Environments#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.

.env#   However, in case of collaboration, if having platform-specific dependencies or dependencies

.venv#   having no cross-platform support, pipenv may install dependencies that don't work, or not

env/#   install all needed dependencies.

venv/#Pipfile.lock

ENV/

env.bak/# poetry

venv.bak/#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.

#   This is especially recommended for binary packages to ensure reproducibility, and is more

# Spyder project settings#   commonly ignored for libraries.

.spyderproject#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

.spyproject#poetry.lock



# Rope project settings# pdm

.ropeproject#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.

#pdm.lock

# mkdocs documentation#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it

/site#   in version control.

#   https://pdm.fming.dev/#use-with-ide

# mypy.pdm.toml

.mypy_cache/

.dmypy.json# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm

dmypy.json=======

.python-version

# Pyre type checker

.pyre/# pipenv

Pipfile.lock

# pytype static type analyzer

.pytype/# poetry

poetry.lock

# Cython debug symbols

cython_debug/# pdm

.pdm.toml

# PyCharm

#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can# PEP 582

#  be added to the global gitignore or merged into this project gitignore.  For PyCharm>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b

# Community Edition, use 'Community' instead of Professional.__pypackages__/

.idea/

# Celery stuff

# VS Codecelerybeat-schedule

.vscode/celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

<<<<<<< HEAD
# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE' configuration.
.idea/

# Project specific files
health_insurance.db
*.db
*.sqlite
*.sqlite3

# Test reports
reports/
htmlcov/
.coverage

# Build outputs
build/
=======
# Reports and logs
reports/
*.html
*.xml
>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b

# Temporary files
*.tmp
*.temp
<<<<<<< HEAD

# Lock files (you may want to include these in some cases)
package-lock.json
yarn.lock
pnpm-lock.yaml
=======
.tmp/

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk
>>>>>>> 7110398f001cfc4d9dd0532b08169a486d50900b
